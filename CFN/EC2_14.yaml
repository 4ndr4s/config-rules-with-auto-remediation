AWSTemplateFormatVersion: 2010-09-09
Description: AWS Config rule for SSH and RDP

Parameters:
  AutomationRoleName:
    Type: String
    Default: "FTA-ConfigAutoRemediation"
    Description: role Name

Resources:
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [EC2.14] Security groups should not allow ingress from 0.0.0.0/0 or ::/0 to port 3389
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  DisablePublicAccessForSecurityGroup:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Name: FTA-DisablePublicAccessForSecurityGroup-withTags
      Content:
        description: >-
          ## Disable RDP ports opened to IP address specified,
           or to all addresses if no address is specified. 
           Similar to the [RevokeSecurityGroupIngress](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RevokeSecurityGroupIngress.html) API, 
           the security group must have existing rules specifically on the SSH and RDP ports in order for ingress to be disabled.
        schemaVersion: '0.3'
        assumeRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AutomationRoleName}'
        parameters:
          AwsService:
            type: String
            default: 'ec2'
          AccountId:
            type: String
            default: !Sub ${AWS::AccountId}
          ResourceType:
            type: String
            default: 'security-group'
          Region:
            type: String
            default: !Sub ${AWS::Region}
          Partition:
            type: String
            default: "aws"
          ControlId:
            type: String
            default: "EC2.14"
          TableName:
            type: String
            default: "arn:aws:dynamodb:us-east-1:412090077236:table/FTA-resource-tags-exclusion-5d9747"
          AutomationAssumeRole:
            type: String
            default: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AutomationRoleName}'
          GroupId:
            type: String
            description: (Required) Security Group ID
            allowedPattern: ^([s][g]\-)([0-9a-f]){1,}$
          IpAddressToBlock:
            type: String
            description: (Optional) Additional Ipv4 or Ipv6 address to block access from (ex:1.2.3.4/32)
            allowedPattern: (^$)|^((25[0-5]|(2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3})|(^((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?)::((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?))|(^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))\/(25[0-5]|2[0-4]\d|[0-1]?\d?\d)$
            default: ""
          GetTagsLambda:
            type: String
            default: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:FTA-GetTagsbyResource"
          QuickSightS3:
            type: String
            default: "quick-sight-report-exclusion-622c56"
        mainSteps:
          - action: 'aws:invokeLambdaFunction'
            name: 'InvokeMyLambdaFunction'
            inputs:
              FunctionName: '{{GetTagsLambda}}'
              Payload: !Sub |
                {
                  "account_id": ${AWS::AccountId},
                  "aws_service": "ec2",
                  "region": "${AWS::Region}",
                  "resource_type": "security-group",
                  "resource_id": "{{GroupId}}",
                  "partition": "aws",
                  "control_id": "EC2.14",
                  "ddb_table": "arn:aws:dynamodb:us-east-1:412090077236:table/FTA-resource-tags-exclusion-5d9747"
                }
          - name: LambdaOutputCheck
            action: aws:branch
            inputs:
              Choices:
              - NextStep: DisableRDPFromIpV4
                Variable: "{{InvokeMyLambdaFunction.Payload}}"
                StringEquals: "NotExcluded"
              - NextStep: DisableRDPFromIpV6
                Variable: "{{InvokeMyLambdaFunction.Payload}}"
                StringEquals: "NotExcluded"
              - NextStep: PublishExcludeLambda
                Variable: "{{InvokeMyLambdaFunction.Payload}}"
                StringEquals: "Excluded"
              Default:
                DisableRDPFromIpV4
          - name: PublishExcludeLambda
            action: 'aws:executeScript'
            inputs:
              Runtime: python3.10
              Handler: script_handler
              Script: "def script_handler(events, context):\r\n  import boto3\r\n  import json\r\n  from datetime import datetime\r\n  \r\n  s3_bucket = events['S3Bucket']\r\n  account_id = events['accountID']\r\n  control_id = events['ControlID']\r\n  region = events['region']\r\n  resource_id = events['ResourceID']\r\n  current_time = datetime.now().strftime('%Y%m%d_%H%M%S')\r\n  data = {\"AccountId\": account_id, \"ResourceId\": resource_id, \"Region\": region, \"control_type\": control_id, \"status\": \"excluded\", \"timeline\": current_time} \r\n  file = json.dumps(data)\r\n  client = boto3.client('s3')\r\n  report = f'excluded/{account_id}/{region}/{current_time}/{resource_id}.json'\r\n  client.put_object(Body=file,Bucket=s3_bucket,Key=report)\r\n"
              InputPayload:
                ResourceID: '{{GroupId}}'
                accountID: '{{AccountId}}'
                region: '{{Region}}'
                S3Bucket: '{{QuickSightS3}}'
                ControlID: '{{ControlId}}'
            isEnd: true
          - name: DisableRDPFromIpV4
            action: "aws:executeAwsApi"
            inputs:
              Service: ec2
              Api: RevokeSecurityGroupIngress
              GroupId: "{{GroupId}}"
              IpPermissions:
                - IpProtocol: tcp
                  FromPort: 3389
                  ToPort: 3389
                  IpRanges:
                    - CidrIp: 0.0.0.0/0
            onFailure: Continue
          - name: DisableRDPFromIpV6
            action: "aws:executeAwsApi"
            inputs:
              Service: ec2
              Api: RevokeSecurityGroupIngress
              GroupId: "{{GroupId}}"
              IpPermissions:
                - IpProtocol: tcp
                  FromPort: 3389
                  ToPort: 3389
                  Ipv6Ranges:
                    - CidrIpv6: "::/0"
            onFailure: Continue
          - name: PublishRemediationLambda
            action: 'aws:executeScript'
            inputs:
              Runtime: python3.10
              Handler: script_handler
              Script: "def script_handler(events, context):\r\n  import boto3\r\n  import json\r\n  from datetime import datetime\r\n  \r\n  s3_bucket = events['S3Bucket']\r\n  account_id = events['accountID']\r\n  control_id = events['ControlID']\r\n  region = events['region']\r\n  resource_id = events['ResourceID']\r\n  current_time = datetime.now().strftime('%Y%m%d_%H%M%S')\r\n  data = {\"AccountId\": account_id, \"ResourceId\": resource_id, \"Region\": region, \"control_type\": control_id, \"status\": \"remediated\", \"timeline\": current_time} \r\n  file = json.dumps(data)\r\n  client = boto3.client('s3')\r\n  report = f'remediated/{account_id}/{region}/{current_time}/{resource_id}.json'\r\n  client.put_object(Body=file,Bucket=s3_bucket,Key=report)\r\n"
              InputPayload:
                ResourceID: '{{GroupId}}'
                accountID: '{{AccountId}}'
                region: '{{Region}}'
                S3Bucket: '{{QuickSightS3}}'
                ControlID: '{{ControlId}}'
            isEnd: true
  AWSConfigRule:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: FTA-RestrictRDPPublicAccess-Tags
      Description: Restrict public access to 3389 port
      InputParameters:
        blockedPort1: 3389
      Scope: 
        ComplianceResourceTypes: 
          - AWS::EC2::SecurityGroup
      Source:
          Owner: AWS
          SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC
  ConfigAutoremediation:
    Type: AWS::Config::RemediationConfiguration
    Properties:
      Automatic: true
      ConfigRuleName: !Ref AWSConfigRule
      MaximumAutomaticAttempts: 3
      Parameters:
        AutomationAssumeRole:
          StaticValue:
            Values: 
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AutomationRoleName}'
        GroupId:
          ResourceValue:
            Value: RESOURCE_ID
      RetryAttemptSeconds: 30
      TargetId: !Ref DisablePublicAccessForSecurityGroup
      TargetType: "SSM_DOCUMENT"


# AWSTemplateFormatVersion: 2010-09-09
# Description: AWS Config rule for SSH and RDP

# Parameters:
#   AutomationRoleName:
#     Type: String
#     Default: "FTA-ConfigAutoRemediation"
#     Description: role Name
#   TopicArn:
#     Type: String
#     Default: "arn:aws:sns:us-east-1:412090077236:FTA-Sec-Tooling-SNS-topic"
#     Description: topic ARN on Security Tooling

# Resources:
#   # -------------------------------------------------------------------------------------------------------------------------------------------------------
#   # [EC2.14] Security groups should not allow ingress from 0.0.0.0/0 or ::/0 to port 3389
#   # -------------------------------------------------------------------------------------------------------------------------------------------------------
#   DisablePublicAccessForSecurityGroup:
#     Type: AWS::SSM::Document
#     Properties:
#       DocumentType: Automation
#       Name: FTA-DisablePublicAccessForSecurityGroup
#       Content:
#         description: >-
#           ## Disable RDP ports opened to IP address specified,
#            or to all addresses if no address is specified. 
#            Similar to the [RevokeSecurityGroupIngress](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RevokeSecurityGroupIngress.html) API, 
#            the security group must have existing rules specifically on the SSH and RDP ports in order for ingress to be disabled.
#         schemaVersion: '0.3'
#         assumeRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AutomationRoleName}'
#         parameters:
#           AutomationAssumeRole:
#             type: String
#             default: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AutomationRoleName}'
#           GroupId:
#             type: String
#             description: (Required) Security Group ID
#             allowedPattern: ^([s][g]\-)([0-9a-f]){1,}$
#           IpAddressToBlock:
#             type: String
#             description: (Optional) Additional Ipv4 or Ipv6 address to block access from (ex:1.2.3.4/32)
#             allowedPattern: (^$)|^((25[0-5]|(2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3})|(^((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?)::((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?))|(^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}))\/(25[0-5]|2[0-4]\d|[0-1]?\d?\d)$
#             default: ""
#           TopicArn:
#             type: String
#             description: (Required) The ARN of the SNS topic to publish the notification to.
#           Message:
#             type: String
#             description: (Required) The message to include in the SNS notification.
#         mainSteps:
#           - name: CustomIpCheck
#             action: aws:branch
#             inputs:
#               Choices:
#               - NextStep: DisableRDPFromIpV6
#                 And:
#                   - Not:
#                       Variable: "{{IpAddressToBlock}}"
#                       StringEquals: ""
#                   - Variable: "{{ IpAddressToBlock }}"
#                     Contains: ":"
#               - NextStep: DisableRDPFromIpV4
#                 And:
#                   - Not:
#                       Variable: "{{IpAddressToBlock}}"
#                       StringEquals: ""
#                   - Not:
#                       Variable: "{{ IpAddressToBlock }}"
#                       Contains: ":"
#               Default:
#                 DisableRDPFromIpV4
#           - name: DisableRDPFromIpV4
#             action: "aws:executeAwsApi"
#             inputs:
#               Service: ec2
#               Api: RevokeSecurityGroupIngress
#               GroupId: "{{GroupId}}"
#               IpPermissions:
#                 - IpProtocol: tcp
#                   FromPort: 3389
#                   ToPort: 3389
#                   IpRanges:
#                     - CidrIp: 0.0.0.0/0
#             onFailure: Continue
#           - name: DisableRDPFromIpV6
#             action: "aws:executeAwsApi"
#             inputs:
#               Service: ec2
#               Api: RevokeSecurityGroupIngress
#               GroupId: "{{GroupId}}"
#               IpPermissions:
#                 - IpProtocol: tcp
#                   FromPort: 3389
#                   ToPort: 3389
#                   Ipv6Ranges:
#                     - CidrIpv6: "::/0"
#             onFailure: Continue
#           - name: PublishSNSNotification
#             action: aws:executeAwsApi
#             inputs:
#               Service: sns
#               Api: Publish
#               TopicArn: "{{TopicArn}}"
#               Message: "{{Message}}, {{GroupId}}"
#             isEnd: true
#   AWSConfigRule:
#     Type: AWS::Config::ConfigRule
#     Properties:
#       ConfigRuleName: FTA-RestrictRDPPublicAccess
#       Description: Restrict public access to 3389 port
#       InputParameters:
#         blockedPort1: 3389
#       Scope: 
#         ComplianceResourceTypes: 
#           - AWS::EC2::SecurityGroup
#       Source:
#           Owner: AWS
#           SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC
#   ConfigAutoremediation:
#     Type: AWS::Config::RemediationConfiguration
#     Properties:
#       Automatic: true
#       ConfigRuleName: !Ref AWSConfigRule
#       MaximumAutomaticAttempts: 3
#       Parameters:
#         AutomationAssumeRole:
#           StaticValue:
#             Values: 
#               - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AutomationRoleName}'
#         TopicArn:
#           StaticValue:
#             Values:
#               - !Ref TopicArn
#         Message:
#           StaticValue:
#             Values:
#               - !Sub 'Notification from FTA-DisablePublicAccessForSecurityGroup trigger in AccountID: ${AWS::AccountId} and Region: ${AWS::Region} by SG:'
#         GroupId:
#           ResourceValue:
#             Value: RESOURCE_ID
#       RetryAttemptSeconds: 30
#       TargetId: !Ref DisablePublicAccessForSecurityGroup
#       TargetType: "SSM_DOCUMENT"
