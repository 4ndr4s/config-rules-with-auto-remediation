AWSTemplateFormatVersion: 2010-09-09
Description: AWS Config rule for SSH and RDP

Parameters:
  AutomationRoleName:
    Type: String
    Default: "ConfigAutoRemediationRole"
    Description: role Name
  AccountInventoryTable:
    Type: String
    Description: The name of the DynamoDB table
  ResourceExclussionTable:
    Type: String
    Description: The name of the DynamoDB table
  SecToolingS3QuickSightBucket:
    Type: String
    Description: Name of Quick Sight S3 bucket for Security Tooling
Resources:
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  # [Lambda.1] Lambda functions should prohibit public access
  # -------------------------------------------------------------------------------------------------------------------------------------------------------
  SSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Name: RestrictPublicLambdaAccess
      Content:
        schemaVersion: '0.3'
        assumeRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AutomationRoleName}'
        parameters:
          AutomationAssumeRole:
            type: String
            default: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AutomationRoleName}'
          FunctionName:
            type: String
          AccountId:
            type: String
            default: !Sub ${AWS::AccountId}
          ResourceType:
            type: String
            default: 'AWS::Lambda::Function'
          ControlId:
            type: String
            default: "Lambda.1"
          GetTagsLambda:
            type: String
            default: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetTagsbyResource"
          GetInventoryLambda:
            type: String
            default: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetAccountInventory"
          ExclusionTable:
            type: String
            default: !Ref ResourceExclussionTable
          InventoryTable:
            type: String
            default: !Ref AccountInventoryTable
          QuickSightS3:
            type: String
            default: !Ref SecToolingS3QuickSightBucket
        mainSteps:
          - name: 'InvokeMyLambdaFunction'
            action: 'aws:invokeLambdaFunction'
            inputs:
              FunctionName: '{{GetTagsLambda}}'
              Payload: !Sub |
                {
                  "account_id": ${AWS::AccountId},
                  "resource_type": "{{ResourceType}}",
                  "resource_id": "{{FunctionName}}",
                  "control_id": "{{ControlId}}",
                  "ddb_table": "{{ExclusionTable}}"
                }
          - name: LambdaOutputCheck
            action: aws:branch
            inputs:
              Choices:
              - NextStep: RestrictLambda
                Variable: "{{InvokeMyLambdaFunction.Payload}}"
                StringEquals: "NotExcluded"
              - NextStep: PublishExcludeLambda
                Variable: "{{InvokeMyLambdaFunction.Payload}}"
                StringEquals: "Excluded"
              Default:
                RestrictLambda
          - name: PublishExcludeLambda
            action: 'aws:invokeLambdaFunction'
            inputs:
              FunctionName: '{{GetInventoryLambda}}'
              Payload: !Sub |
                {
                  "account_id": ${AWS::AccountId},
                  "S3Bucket": "{{QuickSightS3}}",
                  "region": "${AWS::Region}",
                  "status": "excluded",
                  "resource_id": "{{FunctionName}}",
                  "control_id": "{{ControlId}}",
                  "ddb_table": "{{InventoryTable}}"
                }
            isEnd: true
          - name: RestrictLambda
            action: 'aws:executeScript'
            inputs:
              Runtime: python3.10
              Handler: script_handler
              Script: "def script_handler(events, context):\r\n  import boto3\r\n  import json\r\n  \r\n  client = boto3.client('lambda')\r\n  functionname = events['functionname']\r\n  accountID = events['accountID']\r\n  response = client.get_policy(FunctionName=functionname)\r\n  policy = response['Policy']\r\n  policy_json = json.loads(policy)\r\n  statements = policy_json['Statement']\r\n  \r\n  for statement in statements:\r\n    if statement['Principal'] == \"*\":\r\n      response_old = client.remove_permission(\r\n        FunctionName=functionname,\r\n        StatementId=statement['Sid']\r\n      )\r\n      print(\"wildcard policy removed\")\r\n        \r\n    elif statement['Principal']['Service'] == 's3.amazonaws.com':\r\n      if 'Condition' not in statement:\r\n        response_old = client.remove_permission(\r\n          FunctionName=functionname,\r\n\r\n          StatementId=statement['Sid']\r\n        )\r\n      else:\r\n        print(\"not action required\")\r\n"
              InputPayload:
                AutomationAssumeRole: '{{AutomationAssumeRole}}'
                accountID: '{{AccountId}}'
                functionname: '{{FunctionName}}'
          - name: PublishRemediationLambda
            action: 'aws:invokeLambdaFunction'
            inputs:
              FunctionName: '{{GetInventoryLambda}}'
              Payload: !Sub |
                {
                  "account_id": ${AWS::AccountId},
                  "S3Bucket": "{{QuickSightS3}}",
                  "region": "${AWS::Region}",
                  "status": "remediated",
                  "resource_id": "{{FunctionName}}",
                  "control_id": "{{ControlId}}",
                  "ddb_table": "{{InventoryTable}}"
                }
            isEnd: true
  AWSConfigRule:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: LambdaPublicAccessProhibited
      Description: Checks whether the Lambda function policy prohibits public access.
      Scope: 
        ComplianceResourceTypes: 
          - AWS::Lambda::Function
      Source:
          Owner: AWS
          SourceIdentifier: LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED
  ConfigAutoremediation:
    Type: AWS::Config::RemediationConfiguration
    Properties:
      Automatic: true
      ConfigRuleName: !Ref AWSConfigRule
      MaximumAutomaticAttempts: 3
      Parameters:
        AutomationAssumeRole:
          StaticValue:
            Values: 
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AutomationRoleName}'
        FunctionName:
          ResourceValue:
            Value: RESOURCE_ID
      RetryAttemptSeconds: 30
      TargetId: !Ref SSMDocument
      TargetType: "SSM_DOCUMENT"